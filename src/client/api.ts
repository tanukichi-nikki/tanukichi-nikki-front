/* tslint:disable */
/* eslint-disable */
/**
 * Login API
 * API for user login functionality.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface CommunicateReq
 */
export interface CommunicateReq {
  /**
   * The communication message.
   * @type {string}
   * @memberof CommunicateReq
   */
  communicate: string;
}
/**
 *
 * @export
 * @interface CommunicateWrapper
 */
export interface CommunicateWrapper {
  /**
   * The communication message.
   * @type {string}
   * @memberof CommunicateWrapper
   */
  communicate: string;
}
/**
 *
 * @export
 * @interface CommunicateWrapperResult
 */
export interface CommunicateWrapperResult {
  /**
   * The result code of the operation (e.g., success or error code).
   * @type {string}
   * @memberof CommunicateWrapperResult
   */
  resultCode: string;
  /**
   *
   * @type {CommunicateWrapper}
   * @memberof CommunicateWrapperResult
   */
  result: CommunicateWrapper;
}
/**
 *
 * @export
 * @interface CreateDiaryReq
 */
export interface CreateDiaryReq {
  /**
   * The unique identifier for the user.
   * @type {number}
   * @memberof CreateDiaryReq
   */
  userId: number;
  /**
   * List of communication messages associated with the diary entry.
   * @type {Array<string>}
   * @memberof CreateDiaryReq
   */
  communicates?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateDiaryWrapper
 */
export interface CreateDiaryWrapper {
  /**
   * The content of the created diary entry.
   * @type {string}
   * @memberof CreateDiaryWrapper
   */
  diary: string;
  /**
   * Whether the diary entry creation was successful.
   * @type {boolean}
   * @memberof CreateDiaryWrapper
   */
  result: boolean;
}
/**
 *
 * @export
 * @interface CreateDiaryWrapperResult
 */
export interface CreateDiaryWrapperResult {
  /**
   * The result code of the operation (e.g., success or error code).
   * @type {string}
   * @memberof CreateDiaryWrapperResult
   */
  resultCode: string;
  /**
   *
   * @type {CreateDiaryWrapper}
   * @memberof CreateDiaryWrapperResult
   */
  result: CreateDiaryWrapper;
}
/**
 *
 * @export
 * @interface LoginReq
 */
export interface LoginReq {
  /**
   * The name of the user.
   * @type {string}
   * @memberof LoginReq
   */
  name: string;
  /**
   * The password of the user.
   * @type {string}
   * @memberof LoginReq
   */
  password: string;
}
/**
 *
 * @export
 * @interface LoginWrapper
 */
export interface LoginWrapper {
  /**
   * The ID of the user.
   * @type {number}
   * @memberof LoginWrapper
   */
  userId: number;
  /**
   * The name of the user.
   * @type {string}
   * @memberof LoginWrapper
   */
  name: string;
  /**
   * The nickname of the user.
   * @type {string}
   * @memberof LoginWrapper
   */
  nickName: string;
  /**
   * The result of the login attempt, true if successful.
   * @type {boolean}
   * @memberof LoginWrapper
   */
  result: boolean;
}
/**
 *
 * @export
 * @interface LoginWrapperResult
 */
export interface LoginWrapperResult {
  /**
   * The result code of the login attempt.
   * @type {string}
   * @memberof LoginWrapperResult
   */
  resultCode: string;
  /**
   *
   * @type {LoginWrapper}
   * @memberof LoginWrapperResult
   */
  result: LoginWrapper;
}
/**
 *
 * @export
 * @interface RegisterNickNameReq
 */
export interface RegisterNickNameReq {
  /**
   * The nickname to be registered.
   * @type {string}
   * @memberof RegisterNickNameReq
   */
  nickName: string;
}
/**
 *
 * @export
 * @interface RegisterNickNameWrapper
 */
export interface RegisterNickNameWrapper {
  /**
   * The registered nickname.
   * @type {string}
   * @memberof RegisterNickNameWrapper
   */
  nickName: string;
  /**
   * Whether the registration was successful.
   * @type {boolean}
   * @memberof RegisterNickNameWrapper
   */
  result: boolean;
}
/**
 *
 * @export
 * @interface RegisterNickNameWrapperResult
 */
export interface RegisterNickNameWrapperResult {
  /**
   * The result code of the operation (e.g., success or error code).
   * @type {string}
   * @memberof RegisterNickNameWrapperResult
   */
  resultCode: string;
  /**
   *
   * @type {RegisterNickNameWrapper}
   * @memberof RegisterNickNameWrapperResult
   */
  result: RegisterNickNameWrapper;
}
/**
 *
 * @export
 * @interface RegisterUserReq
 */
export interface RegisterUserReq {
  /**
   * The email address of the user.
   * @type {string}
   * @memberof RegisterUserReq
   */
  name: string;
  /**
   * The password for the user.
   * @type {string}
   * @memberof RegisterUserReq
   */
  password: string;
}
/**
 *
 * @export
 * @interface RegisterUserWrapper
 */
export interface RegisterUserWrapper {
  /**
   * The ID of the user.
   * @type {number}
   * @memberof RegisterUserWrapper
   */
  userId: number;
  /**
   * The name (email address) of the user.
   * @type {string}
   * @memberof RegisterUserWrapper
   */
  name: string;
  /**
   * The result of the registration attempt, true if successful.
   * @type {boolean}
   * @memberof RegisterUserWrapper
   */
  result: boolean;
}
/**
 *
 * @export
 * @interface RegisterUserWrapperResult
 */
export interface RegisterUserWrapperResult {
  /**
   * The result code of the registration attempt.
   * @type {string}
   * @memberof RegisterUserWrapperResult
   */
  resultCode: string;
  /**
   *
   * @type {RegisterUserWrapper}
   * @memberof RegisterUserWrapperResult
   */
  result: RegisterUserWrapper;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Send a communication message
     * @param {CommunicateReq} communicateReq Request payload for sending a communication message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    communicate: async (
      communicateReq: CommunicateReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'communicateReq' is not null or undefined
      assertParamExists("communicate", "communicateReq", communicateReq);
      const localVarPath = `/api/v1/communicate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        communicateReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new diary entry
     * @param {CreateDiaryReq} createDiaryReq Request payload for creating a new diary entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiary: async (
      createDiaryReq: CreateDiaryReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createDiaryReq' is not null or undefined
      assertParamExists("createDiary", "createDiaryReq", createDiaryReq);
      const localVarPath = `/api/v1/diary`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createDiaryReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Register a nickname for a user
     * @param {RegisterNickNameReq} registerNickNameReq Request payload for registering a nickname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerNickName: async (
      registerNickNameReq: RegisterNickNameReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'registerNickNameReq' is not null or undefined
      assertParamExists(
        "registerNickName",
        "registerNickNameReq",
        registerNickNameReq
      );
      const localVarPath = `/api/v1/register/nickName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerNickNameReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Send a communication message
     * @param {CommunicateReq} communicateReq Request payload for sending a communication message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async communicate(
      communicateReq: CommunicateReq,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CommunicateWrapperResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.communicate(
        communicateReq,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.communicate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new diary entry
     * @param {CreateDiaryReq} createDiaryReq Request payload for creating a new diary entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDiary(
      createDiaryReq: CreateDiaryReq,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateDiaryWrapperResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createDiary(
        createDiaryReq,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.createDiary"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Register a nickname for a user
     * @param {RegisterNickNameReq} registerNickNameReq Request payload for registering a nickname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerNickName(
      registerNickNameReq: RegisterNickNameReq,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RegisterNickNameWrapperResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.registerNickName(
          registerNickNameReq,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.registerNickName"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Send a communication message
     * @param {CommunicateReq} communicateReq Request payload for sending a communication message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    communicate(
      communicateReq: CommunicateReq,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CommunicateWrapperResult> {
      return localVarFp
        .communicate(communicateReq, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new diary entry
     * @param {CreateDiaryReq} createDiaryReq Request payload for creating a new diary entry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDiary(
      createDiaryReq: CreateDiaryReq,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CreateDiaryWrapperResult> {
      return localVarFp
        .createDiary(createDiaryReq, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Register a nickname for a user
     * @param {RegisterNickNameReq} registerNickNameReq Request payload for registering a nickname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerNickName(
      registerNickNameReq: RegisterNickNameReq,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<RegisterNickNameWrapperResult> {
      return localVarFp
        .registerNickName(registerNickNameReq, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Send a communication message
   * @param {CommunicateReq} communicateReq Request payload for sending a communication message.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public communicate(
    communicateReq: CommunicateReq,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .communicate(communicateReq, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new diary entry
   * @param {CreateDiaryReq} createDiaryReq Request payload for creating a new diary entry.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createDiary(
    createDiaryReq: CreateDiaryReq,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .createDiary(createDiaryReq, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Register a nickname for a user
   * @param {RegisterNickNameReq} registerNickNameReq Request payload for registering a nickname.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public registerNickName(
    registerNickNameReq: RegisterNickNameReq,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .registerNickName(registerNickNameReq, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * This endpoint allows a user to log in by providing login credentials.
     * @summary User login
     * @param {LoginReq} loginReq Login request with credentials.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    doLogin: async (
      loginReq: LoginReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginReq' is not null or undefined
      assertParamExists("doLogin", "loginReq", loginReq);
      const localVarPath = `/api/v1/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication api_key required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint allows a user to log in by providing login credentials.
     * @summary User login
     * @param {LoginReq} loginReq Login request with credentials.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async doLogin(
      loginReq: LoginReq,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LoginWrapperResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.doLogin(
        loginReq,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["LoginApi.doLogin"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LoginApiFp(configuration);
  return {
    /**
     * This endpoint allows a user to log in by providing login credentials.
     * @summary User login
     * @param {LoginReq} loginReq Login request with credentials.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    doLogin(
      loginReq: LoginReq,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<LoginWrapperResult> {
      return localVarFp
        .doLogin(loginReq, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
  /**
   * This endpoint allows a user to log in by providing login credentials.
   * @summary User login
   * @param {LoginReq} loginReq Login request with credentials.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginApi
   */
  public doLogin(loginReq: LoginReq, options?: RawAxiosRequestConfig) {
    return LoginApiFp(this.configuration)
      .doLogin(loginReq, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RegisterApi - axios parameter creator
 * @export
 */
export const RegisterApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * This endpoint allows a user to register by providing their email and password.
     * @summary Register a new user
     * @param {RegisterUserReq} registerUserReq User registration request with email and password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    doRegisterUser: async (
      registerUserReq: RegisterUserReq,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'registerUserReq' is not null or undefined
      assertParamExists("doRegisterUser", "registerUserReq", registerUserReq);
      const localVarPath = `/api/v1/register/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerUserReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RegisterApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint allows a user to register by providing their email and password.
     * @summary Register a new user
     * @param {RegisterUserReq} registerUserReq User registration request with email and password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async doRegisterUser(
      registerUserReq: RegisterUserReq,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RegisterUserWrapperResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.doRegisterUser(
        registerUserReq,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RegisterApi.doRegisterUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RegisterApiFp(configuration);
  return {
    /**
     * This endpoint allows a user to register by providing their email and password.
     * @summary Register a new user
     * @param {RegisterUserReq} registerUserReq User registration request with email and password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    doRegisterUser(
      registerUserReq: RegisterUserReq,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<RegisterUserWrapperResult> {
      return localVarFp
        .doRegisterUser(registerUserReq, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
  /**
   * This endpoint allows a user to register by providing their email and password.
   * @summary Register a new user
   * @param {RegisterUserReq} registerUserReq User registration request with email and password.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RegisterApi
   */
  public doRegisterUser(
    registerUserReq: RegisterUserReq,
    options?: RawAxiosRequestConfig
  ) {
    return RegisterApiFp(this.configuration)
      .doRegisterUser(registerUserReq, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
